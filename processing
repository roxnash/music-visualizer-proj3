//include serial library
import processing.serial.*;


//initialize port and value variables
Serial myPort;  // Create object from Serial class
String val;     // Data received from the serial port
String myString = null;
float myVal;
float[] xyz;

//start values at 0, globally
float x = 0;
float y = 0;
float z = 0;

//make colour maps available globally
float colorX;
float colorY;
float colorZ;

//stuff sourced from coding train
int cols, rows;
int scl = 20;
int w = 3000;
int h = 1600;

//gradient stuff
int Y_AXIS = 1;
int X_AXIS = 2;

float xtraSmall;



//to position stars and store data
int[] starPosX = new int[500];
int[] starPosY = new int[500];
int starNum = 5;


float flying = 0;
float[][] terrain;


void setup() {
  //get info from this port (1)
  String portName = Serial.list()[1]; 
  myPort = new Serial(this, portName, 9600);
  //size of canvas
  //size(1000, 700, P3D);
  fullScreen(P3D);
  //more sourced stuff
  cols = w / scl;
  rows = h/ scl;
  terrain = new float[cols][rows];

  //give stars random positions
  for (int i=0; i<100; i++) {
    starPosX[i] = int(random(0, width));
    starPosY[i] = int(random(0, height/3));
  }
}



void draw() {
  //get data from sensor
  if ( myPort.available() > 0) 
  {  // If data is available,
    val = myPort.readStringUntil('\n');         // read it and store it in val
  } 

  //if there is data in the variable
  if (val!=null) {
    //split the string into 3 variables
    xyz = float(splitTokens(val)); 
    x = xyz[0];
    y = xyz[1];
    z = xyz[2];
  }

  //map values to use for a colour
  colorX = map(x, -250, 250, 0, 255);
  colorY = map(y, -250, 250, 0, 255);
  colorZ = map(z, -250, 250, 0, 255);
  printThings(x, y, z);

  //change speed of flying and bumpiness of terrain based on movement
  float fly = map(y, -250, 250, 0.05, 0.15) + map(x, -250, 250, 0, 0.01);
  flying -= fly;
  //map x to use as terrain bumpiness
  float bumpy = map(x, -250, 250, 0, 250);  

  //use perlin noise to determine shape of terrain
  float yoff = flying;
  for (int y = 0; y < rows; y++) {
    float xoff = 0;
    for (int x = 0; x < cols; x++) {
      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -bumpy, bumpy);
      xoff += 0.2;
    }
    yoff += 0.2;
  }

  //change background based on movement
  background(colorZ, colorY, 255);


  //create stars in background
  //give random positions, fill and empty those spots determined by movement
  starNum = int(map(y, 300, -300, 5, 100));
  println(starNum);
  for (int i = 0; i <= starNum; i++) {
    pushMatrix();
    fill(255);
    noStroke();
    translate(starPosX[i], starPosY[i]);
    rotate(frameCount / 200.0);
    star(0, 0, 5, 2, 4); 
    popMatrix();
  }
  println(width);

  //gradient stuff
  setGradients();


  //mapping for circles below
  float sunHeight = map(z, -400, 400, 600, 200);
  float miniSunX = map(y, -400, 400, -100, 100);
  float miniSunY = map(z, -400, 400, (height/2)-300, height/2+600);
  float midX = map(y, -400, 400, 2500, 100);
  float midY = map(y, -400, 400, 100, 2500);
  float small = map(z, -400, 400, -100, 200);
  float xtraSmall1 = map(z, -400, 400, 0, 200);
  float xtraSmall2 = map(x, -400, 400, 0, 200);
  float xtraSmall3 = map(y, -400, 400, 0, 200);


  //curve
  curvyLine(255, colorY, 255, 200, xtraSmall1);
  curvyLine(colorX, 255, colorY, 150, xtraSmall2);
  curvyLine(colorZ, 255, 255, 230, xtraSmall3);



  noStroke();
  //circles that only appear when u dance hard
  fill(255);
  ellipse(300, midX, 150,150);
  fill(0, colorY, colorZ);
  ellipse(700-(small/2), midX, 40, 40);
  fill(255, 0, colorX);
  ellipse(38+(small*2), midY, 135, 135);
  fill(colorZ, 255, 0);
  ellipse(655, midY, 70, 70);
  fill(0, colorX, colorY);
  ellipse(999, midX, 45, 45);
  fill(colorY, 0, colorZ);
  ellipse(1155-small, midY, 130, 130);
  fill(colorX, 255, colorY);
  ellipse(899+small, midX, 45, 45);

  //big middle circle
  fill(255);
  ellipse(width/2, sunHeight, 300, 300);

  //little circles
  fill(colorY, colorX, 255);
  ellipse(100+miniSunX, miniSunY+20, 10, 10);
  ellipse(380+miniSunX, miniSunY-10, 15, 15);
  ellipse(700+miniSunX, miniSunY+55, 35, 35);
  ellipse(850+miniSunX, miniSunY, 20, 20);
  ellipse(220+miniSunX, miniSunY+200, 28, 28);
  ellipse(470+miniSunX, miniSunY-100, 15, 15);
  ellipse(900+miniSunX, miniSunY+255, 35, 35);
  ellipse(1150+miniSunX, miniSunY-150, 22, 22);

  fill(255, 255, colorZ);
  ellipse(50+miniSunX, miniSunY, 10, 10);
  ellipse(320+miniSunX, miniSunY+50, 33, 33);
  ellipse(550+miniSunX, miniSunY-10, 15, 15);
  ellipse(975+miniSunX, miniSunY-45, 35, 35);
  ellipse(1200+miniSunX, miniSunY-50, 32, 32);

  //lil black circles
  fill(255);
  ellipse(miniSunX+10, sunHeight+10, 8, 8);
  ellipse(miniSunX+100, sunHeight-110, 8, 8);
  ellipse(miniSunX+210, sunHeight+160, 8, 8);
  ellipse(miniSunX+910, sunHeight+210, 8, 8);
  ellipse(miniSunX+1110, sunHeight-40, 8, 8);
  ellipse(miniSunX+500, sunHeight+10, 8, 8);
  ellipse(miniSunX+444, sunHeight+60, 8, 8);


  //terrain colours
  stroke(255);
  fill(100, colorZ, colorX);


  //draw lines on terrain, rotate in 3D
  pushMatrix();
  translate((width/2)+miniSunX, height/2+150);
  rotateX(PI/3);
  translate(-w/2, -h/2);
  for (int y = 0; y < rows-1; y++) {
    beginShape(TRIANGLE_STRIP);
    for (int x = 0; x < cols; x++) {
      vertex(x*scl, y*scl, terrain[x][y]);
      vertex(x*scl, (y+1)*scl, terrain[x][y+1]);
    }
    endShape();
  }
  popMatrix();
}


void printThings(float x, float y, float z) {
  print(x);
  print(" ");
  print(y);
  print(" ");
  println(z);
}

//star example from https://processing.org/examples/star.html
void star(float x, float y, float radius1, float radius2, int npoints) {
  float angle = TWO_PI / npoints;
  float halfAngle = angle/2.0;
  beginShape();
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius2;
    float sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a+halfAngle) * radius1;
    sy = y + sin(a+halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

//gradient from https://processing.org/examples/lineargradient.html
void setGradient(int x, int y, float w, float h, color c1, color c2, int axis ) {
  noFill();
  if (axis == Y_AXIS) {  // Top to bottom gradient
    for (int i = y; i <= y+h; i++) {
      float inter = map(i, y, y+h, 0, 1);
      color c = lerpColor(c1, c2, inter);
      stroke(c);
      line(x, i, x+w, i);
    }
  } else if (axis == X_AXIS) {  // Left to right gradient
    for (int i = x; i <= x+w; i++) {
      float inter = map(i, x, x+w, 0, 1);
      color c = lerpColor(c1, c2, inter);
      stroke(c);
      line(i, y, i, y+h);
    }
  }
}

//gradient at top of screen
void setGradients() {

  setGradient(0, 0, width/5, 30, color(colorZ, 255, 0), color(colorY, 0, 255), X_AXIS);
  setGradient(width/5, 0, width/5, 30, color(colorY, 0, 255), color(255, colorY, 255), X_AXIS);
  setGradient((width/5)*2, 0, width/5, 30, color(255, colorY, 255), color(0, colorX, 255), X_AXIS);
  setGradient((width/5)*3, 0, width/5, 30, color(0, colorX, 255), color(0, 255, colorY), X_AXIS);
  setGradient((width/5)*4, 0, width/5, 30, color(0, 255, colorY), color(255, 0, colorZ), X_AXIS);
}

//curvy lines
void curvyLine(float c1, float c2, float c3, float x, float num) {
  for (float i = 0; i < 12*TWO_PI; i+=0.02) {
    // Calculate value
    float y = sin(i);
    // Render wave using ellipse.
    noStroke();
    fill(color(c1, c2, c3));
    ellipse(i*num, x+y*30, 6, 6);
  }
}
